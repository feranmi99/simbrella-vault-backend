import Wallet from '../models/WalletModel.model';
import User from '../models/UserModel.model';

export class WalletService {
    // Create a new wallet for a user
    async createWallet(userId: number) {
        const user = await User.findByPk(userId);
        if (!user) throw new Error('User not found');

        const existingWallet = await Wallet.findOne({ where: { userId } });
        if (existingWallet) throw new Error('User already has a wallet');

        return await Wallet.create({
            userId,
            balance: 0,
            currency: 'NGN',
            accountNumber: this.generateAccountNumber(), // Optional if you're using account numbers
            // walletAddress will be auto-generated by @BeforeCreate
        });
    }

    // Get all wallets
    async getAllWallets() {
        return await Wallet.findAll({ include: [User] });
    }

    // Get wallet by wallet ID
    async getWalletById(walletId: number) {
        return await Wallet.findByPk(walletId, { include: [User] });
    }

    // Get wallet by user ID
    async getWalletByUserId(userId: number) {
        return await Wallet.findOne({ where: { userId }, include: [User] });
    }

    // Fund a wallet
    async fundWallet(walletId: number, amount: number) {
        const wallet = await Wallet.findByPk(walletId);
        if (!wallet) throw new Error('Wallet not found');

        wallet.balance += amount;
        await wallet.save();
        return wallet;
    }

    // Optional: generate dummy NUBAN-style account number
    private generateAccountNumber(): string {
        return '10' + Math.floor(100000000 + Math.random() * 900000000).toString(); // 10-digit account number
    }
}
